<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Rooms - Hostelia</title>
   
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
        rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        .gradient {
            background: linear-gradient(90deg, #004aad 0%, #cb6ce6 100%);
        }
        body {
            font-family: "Poppins", sans-serif;
        }
    </style>
</head>

<body>
    <!-- Navbar Section -->
    <%- include('partials/navbar.ejs', { loggedIn }) %>

    <!-- Hero Section -->
    <div class="relative bg-gradient-to-r from-blue-600 to-purple-500 md:min-h-[350px] flex items-center justify-center text-center px-4">
        <div class="max-w-6xl mx-auto relative z-10 mt-20">
            <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">Chat Rooms</h1>
            <p class="text-xl md:text-2xl text-white opacity-90 mb-8">Connect with students and wardens through dedicated chat rooms</p>
            
            <!-- Service Navigation Buttons -->
            <div class="flex flex-wrap justify-center gap-4 mb-4">
                <a href="/services/problems" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-500 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    Problem Tracker
                </a>
                <a href="/services/register" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    Entry/Exit
                </a>
                <a href="/services/chatRoom" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                    Chat Room
                </a>
            </div>
        </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <!-- Create Chat Room Section (only for admin/warden) -->
        <% if (role === 'admin' || role === 'warden') { %>
        <div class="bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl shadow-lg p-8 mb-12 border border-blue-100">
            <h2 class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 mb-6">Create New Chat Room</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Chat Room Name</label>
                    <input type="text" id="roomName" class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" placeholder="Enter chat room name">
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Room Type</label>
                    <select id="roomType" class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                        <option value="">Select room type</option>
                        <option value="general">General Discussion</option>
                        <option value="announcement">Announcements</option>
                        <option value="hostel">Hostel Specific</option>
                        <option value="event">Event Planning</option>
                        <option value="issue">Issue Resolution</option>
                    </select>
                </div>
                <div class="md:col-span-2">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                    <textarea id="roomDescription" class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" rows="3" placeholder="Describe the purpose of this chat room"></textarea>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Access Level</label>
                    <select id="roomAccess" class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
                        <option value="">Select access level</option>
                        <option value="all">Everyone</option>
                        <option value="students">Students Only</option>
                        <option value="wardens">Wardens Only</option>
                        <option value="admins">Admins Only</option>
                        <option value="admin_warden">Admins & Wardens</option>
                        <option value="admin_student">Admins & Students</option>
                        <option value="warden_student">Wardens & Students</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Room Icon</label>
                    <div class="flex flex-wrap gap-3 mt-2">
                        <div class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all" data-icon="fas fa-comments">
                            <i class="fas fa-comments text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"></i>
                        </div>
                        <div class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all" data-icon="fas fa-bullhorn">
                            <i class="fas fa-bullhorn text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"></i>
                        </div>
                        <div class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all" data-icon="fas fa-home">
                            <i class="fas fa-home text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"></i>
                        </div>
                        <div class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all" data-icon="fas fa-exclamation-circle">
                            <i class="fas fa-exclamation-circle text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"></i>
                        </div>
                        <div class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all" data-icon="fas fa-calendar-alt">
                            <i class="fas fa-calendar-alt text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"></i>
                        </div>
                    </div>
                </div>
                <div class="md:col-span-2">
                    <button type="button" id="createChatRoom" class="w-full px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-md hover:shadow-lg">
                        Create Chat Room
                    </button>
                </div>
            </div>
        </div>
        <% } %>
        
        <!-- Available Chat Rooms Section -->
        <div>
            <h2 class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 mb-6">Available Chat Rooms</h2>
            <div id="chatRoomsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <% chatRooms.forEach(room => { %>
                <div class="bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-200 border border-blue-100">
                    <div class="p-6">
                        <div class="w-12 h-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center mb-4 shadow-md">
                            <i class="<%= room.roomIcon %> text-white text-xl"></i>
                        </div>
                        <h3 class="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 mb-2"><%= room.roomName %></h3>
                        <p class="text-gray-600 mb-4"><%= room.description %></p>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-gray-500 flex items-center">
                                <i class="fas fa-users mr-1"></i> <%= room.accessLevel %>
                            </span>
                            <div class="flex space-x-2">
                                <% if (role === 'admin' || role === 'warden') { %>
                                    <button class="delete-chatroom px-4 py-2 bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-lg hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg" data-id="<%= room._id %>">
                                        Delete
                                    </button>
                                <% } %>
                                
                                <% if (room.accessLevel === 'all' || 
                                     (room.accessLevel === 'students' && role === 'student') || 
                                     (room.accessLevel === 'wardens' && role === 'warden') || 
                                     (room.accessLevel === 'admins' && role === 'admin')) { %>
                                    <a href="/services/chatRoom/<%= room._id %>" class="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-md hover:shadow-lg">Join</a>
                                <% } else { %>
                                    <span class="px-4 py-2 bg-gray-300 text-gray-600 rounded-lg cursor-not-allowed">Access Denied</span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
                <% }) %>
            </div>
        </div>
    </div>
  
    <script>
        // Icon selection
        let selectedIcon = '';
        document.querySelectorAll('.icon-option').forEach(icon => {
            icon.addEventListener('click', function() {
                // Remove highlight from all
                document.querySelectorAll('.icon-option').forEach(i => i.classList.remove('border-2', 'border-blue-500'));
                // Highlight the clicked one and store its icon class
                this.classList.add('border-2', 'border-blue-500');
                selectedIcon = this.getAttribute('data-icon');
            });
        });
    
        // Create Chat Room
        document.getElementById('createChatRoom').addEventListener('click', function() {
            const roomName = document.getElementById('roomName').value;
            const roomType = document.getElementById('roomType').value;
            const description = document.getElementById('roomDescription').value;
            const accessLevel = document.getElementById('roomAccess').value;
    
            if (!roomName || !roomType || !accessLevel) {
                Swal.fire('Error', 'Please fill in the required fields', 'error');
                return;
            }
    
            fetch('/services/chatRoom/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ roomName, roomType, description, accessLevel, roomIcon: selectedIcon })
            })
            .then(res => {
                if (!res.ok) {
                    throw new Error('Failed to create chat room');
                }
                return res.json();
            })
            .then(data => {
                // Create a new chat room card and prepend it to the container
                const container = document.getElementById('chatRoomsContainer');
                const card = document.createElement('div');
                card.className = "bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-200 border border-blue-100";
                
                // Get the current user's role from the server-side variable
                const userRole = '<%= role %>';
                
                // Determine if the user has access to this room
                const hasAccess = data.accessLevel === 'all' || 
                                (data.accessLevel === 'students' && userRole === 'student') || 
                                (data.accessLevel === 'wardens' && userRole === 'warden') || 
                                (data.accessLevel === 'admins' && userRole === 'admin');
                
                // Determine if user can see delete button
                const canDelete = userRole === 'admin' || userRole === 'warden';
                
                card.innerHTML = `
                    <div class="p-6">
                        <div class="w-12 h-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg flex items-center justify-center mb-4 shadow-md">
                            <i class="${data.roomIcon || 'fas fa-comments'} text-white text-xl"></i>
                        </div>
                        <h3 class="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 mb-2">${data.roomName}</h3>
                        <p class="text-gray-600 mb-4">${data.description}</p>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-gray-500 flex items-center">
                                <i class="fas fa-users mr-1"></i> ${data.accessLevel}
                            </span>
                            <div class="flex space-x-2">
                                ${canDelete ? `
                                    <button class="delete-chatroom px-4 py-2 bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-lg hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg" data-id="${data._id}">
                                        Delete
                                    </button>
                                ` : ''}
                                
                                ${hasAccess ? `
                                    <a href="/services/chatRoom/${data._id}" class="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-md hover:shadow-lg">Join</a>
                                ` : `
                                    <span class="px-4 py-2 bg-gray-300 text-gray-600 rounded-lg cursor-not-allowed">Access Denied</span>
                                `}
                            </div>
                        </div>
                    </div>`;
                container.prepend(card);

                // Clear form fields and reset icon selection
                document.getElementById('roomName').value = '';
                document.getElementById('roomType').value = '';
                document.getElementById('roomDescription').value = '';
                document.getElementById('roomAccess').value = '';
                selectedIcon = '';
                document.querySelectorAll('.icon-option').forEach(i => i.classList.remove('border-2', 'border-blue-500'));
                Swal.fire('Success', 'Chat room created successfully!', 'success');
            })
            .catch(err => {
                console.error(err);
                Swal.fire('Error', err.message, 'error');
            });
        });

        // Delete Chat Room (delegated event listener for all chat rooms)
        document.getElementById('chatRoomsContainer').addEventListener('click', function(e) {
            if (e.target && e.target.matches('button.delete-chatroom')) {
                const chatRoomId = e.target.getAttribute('data-id');
                if (!chatRoomId) {
                    Swal.fire('Error', 'Invalid chat room ID', 'error');
                    return;
                }
                
                Swal.fire({
                    title: 'Are you sure?',
                    text: "This chat room will be permanently deleted for all users!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/services/chatRoom/delete/${chatRoomId}`, {
                            method: 'DELETE'
                        })
                        .then(res => {
                            if (!res.ok) {
                                throw new Error('Failed to delete chat room');
                            }
                            // Remove the chat room card from the UI
                            const chatRoomCard = e.target.closest('.bg-gradient-to-br');
                            chatRoomCard.style.transition = 'all 0.3s ease';
                            chatRoomCard.style.opacity = '0';
                            chatRoomCard.style.transform = 'scale(0.95)';
                            
                            setTimeout(() => {
                                chatRoomCard.remove();
                                // Check if there are no more chat rooms
                                const remainingRooms = document.querySelectorAll('.bg-gradient-to-br').length;
                                if (remainingRooms === 0) {
                                    const container = document.getElementById('chatRoomsContainer');
                                    container.innerHTML = `
                                        <div class="col-span-full text-center py-8">
                                            <p class="text-gray-500">No chat rooms available</p>
                                        </div>
                                    `;
                                }
                            }, 300);

                            Swal.fire('Deleted!', 'Chat room has been permanently deleted.', 'success');
                        })
                        .catch(err => {
                            console.error(err);
                            Swal.fire('Error', err.message, 'error');
                        });
                    }
                });
            }
        });

        // Listen for chat room deletion events
        const socket = io();
        socket.on('chatRoomDeleted', ({ roomId, message }) => {
            // Find and remove the chat room card
            const chatRoomCard = document.querySelector(`[data-id="${roomId}"]`)?.closest('.bg-gradient-to-br');
            if (chatRoomCard) {
                chatRoomCard.style.transition = 'all 0.3s ease';
                chatRoomCard.style.opacity = '0';
                chatRoomCard.style.transform = 'scale(0.95)';
                
                setTimeout(() => {
                    chatRoomCard.remove();
                    // Check if there are no more chat rooms
                    const remainingRooms = document.querySelectorAll('.bg-gradient-to-br').length;
                    if (remainingRooms === 0) {
                        const container = document.getElementById('chatRoomsContainer');
                        container.innerHTML = `
                            <div class="col-span-full text-center py-8">
                                <p class="text-gray-500">No chat rooms available</p>
                            </div>
                        `;
                    }
                }, 300);

                // Show notification
                Swal.fire({
                    title: 'Chat Room Deleted',
                    text: message,
                    icon: 'info',
                    confirmButtonText: 'OK'
                });
            }
        });
    </script>

    <%- include('partials/footer.ejs') %>
    <script src="/js/navbar.js"></script>
</body>
</html>