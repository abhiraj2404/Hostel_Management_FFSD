<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat Rooms - Hostelia</title>

    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      .gradient {
        background: linear-gradient(90deg, #004aad 0%, #cb6ce6 100%);
      }
      body {
        font-family: "Poppins", sans-serif;
      }
      .chatroom-container {
        width: 100%;
        max-width: 1200px;
        height: auto;
        min-height: 400px;
        margin: 0 auto;
        overflow-y: auto;
        border: 1px solid #e5e7eb;
        border-radius: 0.75rem;
        background-color: #f9fafb;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
          0 2px 4px -1px rgba(0, 0, 0, 0.06);
      }
      .chatroom-container::-webkit-scrollbar {
        width: 8px;
      }
      .chatroom-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
      }
      .chatroom-container::-webkit-scrollbar-thumb {
        background: #d1d5db;
        border-radius: 4px;
      }
      .chatroom-container::-webkit-scrollbar-thumb:hover {
        background: #9ca3af;
      }
      .chatroom-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 0.75rem;
        padding: 0.5rem;
      }
      @media (min-width: 640px) {
        .chatroom-grid {
          grid-template-columns: 1fr 1fr;
          gap: 1rem;
          padding: 1rem;
        }
      }
      @media (min-width: 1024px) {
        .chatroom-grid {
          grid-template-columns: 1fr 1fr 1fr;
          gap: 2rem;
          padding: 1.5rem;
        }
      }
    </style>
  </head>

  <body>
    <!-- Navbar Section -->
    <%- include('partials/navbar.ejs', { loggedIn }) %>

    <!-- Hero Section -->
    <div
      class="relative bg-gradient-to-r from-blue-600 to-purple-500 md:min-h-[350px] flex items-center justify-center text-center px-4"
    >
      <div class="max-w-6xl mx-auto relative z-10 mt-20">
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">
          Chat Rooms
        </h1>
        <p class="text-xl md:text-2xl text-white opacity-90 mb-8">
          Connect with students and wardens through dedicated chat rooms
        </p>

        <!-- Service Navigation Buttons -->
        <div class="flex flex-wrap justify-center gap-4 mb-4">
          <a
            href="/services/problems"
            class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-500 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105"
          >
            <svg
              class="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
              />
            </svg>
            Problem Tracker
          </a>
          <a
            href="/services/register"
            class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105"
          >
            <svg
              class="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
              />
            </svg>
            Entry/Exit
          </a>
          <a
            href="/services/chatRoom"
            class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105"
          >
            <svg
              class="w-5 h-5 mr-2"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
              />
            </svg>
            Chat Room
          </a>
        </div>
      </div>
    </div>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <!-- Create Chat Room Section (only for admin/warden) -->
      <% if (role === 'admin' || role === 'warden') { %>
      <div
        class="bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl shadow-lg p-8 mb-12 border border-blue-100"
      >
        <h2
          class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 mb-6"
        >
          Create New Chat Room
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Chat Room Name</label
            >
            <input
              type="text"
              id="roomName"
              class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              placeholder="Enter chat room name"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Room Type</label
            >
            <select
              id="roomType"
              class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            >
              <option value="">Select room type</option>
              <option value="general">General Discussion</option>
              <option value="announcement">Announcements</option>
              <option value="hostel">Hostel Specific</option>
              <option value="event">Event Planning</option>
              <option value="issue">Issue Resolution</option>
            </select>
          </div>
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Description</label
            >
            <textarea
              id="roomDescription"
              class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              rows="3"
              placeholder="Describe the purpose of this chat room"
            ></textarea>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Access Level</label
            >
            <select
              id="roomAccess"
              class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            >
              <option value="">Select access level</option>
              <option value="all">Everyone</option>
              <option value="students">Students Only</option>
              <option value="wardens">Wardens Only</option>
              <option value="admins">Admins Only</option>
              <option value="admin_warden">Admins & Wardens</option>
              <option value="admin_student">Admins & Students</option>
              <option value="warden_student">Wardens & Students</option>
            </select>
          </div>
          <div id="hostelRestrictionDiv" class="hidden">
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Hostel
              <span class="text-xs text-blue-500"
                >(required for student access)</span
              >
            </label>
            <select
              id="restrictedToHostel"
              class="w-full p-3 border border-blue-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
            >
              <option value="">Select Hostel</option>
              <option value="BH-1">Hostel BH-1</option>
              <option value="BH-2">Hostel BH-2</option>
              <option value="BH-3">Hostel BH-3</option>
              <option value="BH-4">Hostel BH-4</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2"
              >Room Icon</label
            >
            <div class="flex flex-wrap gap-3 mt-2">
              <div
                class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all"
                data-icon="fas fa-comments"
              >
                <i
                  class="fas fa-comments text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"
                ></i>
              </div>
              <div
                class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all"
                data-icon="fas fa-bullhorn"
              >
                <i
                  class="fas fa-bullhorn text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"
                ></i>
              </div>
              <div
                class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all"
                data-icon="fas fa-home"
              >
                <i
                  class="fas fa-home text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"
                ></i>
              </div>
              <div
                class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all"
                data-icon="fas fa-exclamation-circle"
              >
                <i
                  class="fas fa-exclamation-circle text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"
                ></i>
              </div>
              <div
                class="icon-option w-10 h-10 rounded-lg bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center cursor-pointer hover:from-blue-200 hover:to-purple-200 transition-all"
                data-icon="fas fa-calendar-alt"
              >
                <i
                  class="fas fa-calendar-alt text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600"
                ></i>
              </div>
            </div>
          </div>
          <div class="md:col-span-2">
            <button
              type="button"
              id="createChatRoom"
              class="w-full px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-md hover:shadow-lg"
            >
              Create Chat Room
            </button>
          </div>
        </div>
      </div>
      <% } %>

      <!-- Available Chat Rooms Section -->
      <div>
        <h2
          class="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600 mb-6"
        >
          Available Chat Rooms
        </h2>
        <div class="chatroom-container">
          <div id="chatRoomsContainer" class="chatroom-grid">
            <% const accessibleRooms = chatRooms.filter(room => { let hasAccess
            = false; if (role === 'admin') { hasAccess = true; } else if (role
            === 'warden') { const allowsWardens = ['wardens', 'admin_warden',
            'warden_student', 'admin_student',
            'all'].includes(room.accessLevel); const includesStudents =
            ['students', 'admin_student',
            'warden_student'].includes(room.accessLevel); if (includesStudents)
            { if (room.restrictedToHostel && room.restrictedToHostel !==
            userHostel) { hasAccess = false; } else { hasAccess = true; } } else
            { hasAccess = allowsWardens; } } else if (role === 'student') {
            const allowsStudents = ['students', 'admin_student',
            'warden_student', 'all'].includes(room.accessLevel); if
            (allowsStudents) { if (room.restrictedToHostel &&
            room.restrictedToHostel !== userHostel) { hasAccess = false; } else
            { hasAccess = true; } } } return hasAccess; }); %> <%
            accessibleRooms.forEach(room => { %>
            <div
              class="bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 border border-blue-100 flex flex-col justify-between h-full p-0"
              data-room-id="<%= room._id %>"
            >
              <div class="flex flex-col items-center p-6 pb-2">
                <div
                  class="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg"
                >
                  <i class="<%= room.roomIcon %> text-white text-2xl"></i>
                </div>
                <h3 class="text-2xl font-bold text-blue-700 mb-1 text-center">
                  <%= room.roomName %>
                </h3>
                <div class="mb-2">
                  <span
                    class="inline-block px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-xs font-semibold"
                  >
                    <%= room.roomType %>
                  </span>
                </div>
                <p
                  class="text-gray-500 text-center mb-4 text-base min-h-[32px]"
                >
                  <%= room.description %>
                </p>
                <div class="flex flex-wrap justify-center gap-2 mb-4">
                  <span
                    class="flex items-center px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-xs font-medium"
                  >
                    <i class="fas fa-users mr-1"></i> <%= room.accessLevel %>
                  </span>
                  <% if (room.restrictedToHostel) { %>
                  <span
                    class="flex items-center px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium"
                  >
                    <i class="fas fa-building mr-1"></i> Hostel <%=
                    room.restrictedToHostel %>
                  </span>
                  <% } %>
                </div>
              </div>
              <div
                class="flex justify-between items-center px-6 pb-4 pt-2 mt-auto gap-2"
              >
                <% if (role === 'admin' || role === 'warden') { %>
                <button
                  class="delete-chatroom px-4 py-2 bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-lg hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg"
                  data-id="<%= room._id %>"
                >
                  Delete
                </button>
                <% } %> <% if (accessibleRooms.includes(room)) { %>
                <a
                  href="/services/chatRoom/<%= room._id %>"
                  class="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-md hover:shadow-lg"
                >
                  Join
                </a>
                <% } %>
              </div>
            </div>
            <% }) %>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Icon selection
      let selectedIcon = "";
      document.querySelectorAll(".icon-option").forEach((icon) => {
        icon.addEventListener("click", function () {
          // Remove highlight from all
          document
            .querySelectorAll(".icon-option")
            .forEach((i) => i.classList.remove("border-2", "border-blue-500"));
          // Highlight the clicked one and store its icon class
          this.classList.add("border-2", "border-blue-500");
          selectedIcon = this.getAttribute("data-icon");
        });
      });

      // Show/hide hostel restriction field based on access level
      document
        .getElementById("roomAccess")
        .addEventListener("change", function () {
          const accessLevel = this.value;
          const hostelRestrictionDiv = document.getElementById(
            "hostelRestrictionDiv"
          );
          const restrictedToHostel =
            document.getElementById("restrictedToHostel");
          // Autofill and lock for wardens creating student/warden chat rooms
          if (
            (accessLevel === "students" ||
              accessLevel === "admin_student" ||
              accessLevel === "warden_student") &&
            "<%= role %>" === "warden"
          ) {
            hostelRestrictionDiv.classList.remove("hidden");
            restrictedToHostel.value = "<%= userHostel %>";
            restrictedToHostel.disabled = true;
          } else if (
            accessLevel === "students" ||
            accessLevel === "admin_student" ||
            accessLevel === "warden_student"
          ) {
            hostelRestrictionDiv.classList.remove("hidden");
            restrictedToHostel.disabled = false;
          } else {
            hostelRestrictionDiv.classList.add("hidden");
            restrictedToHostel.value = "";
            restrictedToHostel.disabled = false;
          }
        });

      // Create Chat Room
      document
        .getElementById("createChatRoom")
        .addEventListener("click", function () {
          const roomName = document.getElementById("roomName").value;
          const roomType = document.getElementById("roomType").value;
          const description = document.getElementById("roomDescription").value;
          const accessLevel = document.getElementById("roomAccess").value;
          const restrictedToHostel =
            document.getElementById("restrictedToHostel").value;
          if (!roomName || !roomType || !accessLevel) {
            Swal.fire("Error", "Please fill in the required fields", "error");
            return;
          }
          if (
            (accessLevel === "students" ||
              accessLevel === "admin_student" ||
              accessLevel === "warden_student") &&
            !restrictedToHostel
          ) {
            Swal.fire(
              "Error",
              "Please select a hostel for this access level",
              "error"
            );
            return;
          }
          fetch("/services/chatRoom/create", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              roomName,
              roomType,
              description,
              accessLevel,
              restrictedToHostel,
              roomIcon: selectedIcon,
            }),
          })
            .then((res) => {
              if (!res.ok) {
                if (res.status === 409) {
                  return res.json().then((err) => {
                    throw new Error(err.error);
                  });
                }
                throw new Error("Failed to create chat room");
              }
              return res.json();
            })
            .then((data) => {
              // Create a new chat room card and prepend it to the container
              const container = document.getElementById("chatRoomsContainer");
              const card = document.createElement("div");
              card.className =
                "bg-white rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 border border-blue-100 flex flex-col justify-between h-full p-0";
              card.setAttribute("data-room-id", data._id);

              // Get the current user's role from the server-side variable
              const userRole = "<%= role %>";
              const userHostel = "<%= userHostel %>";

              // Determine access rights using the same logic as the backend
              let hasAccess = false;

              // Admins always have access
              if (userRole === "admin") {
                hasAccess = true;
              }
              // For wardens
              else if (userRole === "warden") {
                const allowsWardens = [
                  "wardens",
                  "admin_warden",
                  "warden_student",
                  "admin_student",
                  "all",
                ].includes(data.accessLevel);
                const includesStudents = [
                  "students",
                  "admin_student",
                  "warden_student",
                ].includes(data.accessLevel);

                if (includesStudents) {
                  if (
                    data.restrictedToHostel &&
                    data.restrictedToHostel !== userHostel
                  ) {
                    hasAccess = false;
                  } else {
                    hasAccess = true;
                  }
                } else {
                  hasAccess = allowsWardens;
                }
              }
              // For students
              else if (userRole === "student") {
                const allowsStudents = [
                  "students",
                  "admin_student",
                  "warden_student",
                  "all",
                ].includes(data.accessLevel);

                if (allowsStudents) {
                  if (
                    data.restrictedToHostel &&
                    data.restrictedToHostel !== userHostel
                  ) {
                    hasAccess = false;
                  } else {
                    hasAccess = true;
                  }
                }
              }

              // Determine if user can see delete button
              const canDelete = userRole === "admin" || userRole === "warden";

              card.innerHTML = `
                <div class="flex flex-col items-center p-6 pb-2">
                  <div class="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg">
                    <i class="${
                      data.roomIcon || "fas fa-comments"
                    } text-white text-2xl"></i>
                  </div>
                  <h3 class="text-2xl font-bold text-blue-700 mb-1 text-center">
                    ${data.roomName}
                  </h3>
                  <div class="mb-2">
                    <span class="inline-block px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-xs font-semibold">
                      ${data.roomType}
                    </span>
                  </div>
                  <p class="text-gray-500 text-center mb-4 text-base min-h-[32px]">
                    ${data.description}
                  </p>
                  <div class="flex flex-wrap justify-center gap-2 mb-4">
                    <span class="flex items-center px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-xs font-medium">
                      <i class="fas fa-users mr-1"></i> ${data.accessLevel}
                    </span>
                    ${
                      data.restrictedToHostel
                        ? `<span class="flex items-center px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                        <i class="fas fa-building mr-1"></i> Hostel ${data.restrictedToHostel}
                      </span>`
                        : ""
                    }
                  </div>
                </div>
                <div class="flex justify-between items-center px-6 pb-4 pt-2 mt-auto gap-2">
                  ${
                    canDelete
                      ? `<button class="delete-chatroom px-4 py-2 bg-gradient-to-r from-red-500 to-pink-500 text-white rounded-lg hover:from-red-600 hover:to-pink-600 transition-all duration-200 shadow-md hover:shadow-lg" data-id="${data._id}">
                      Delete
                    </button>`
                      : ""
                  }
                  ${
                    hasAccess
                      ? `<a href="/services/chatRoom/${data._id}" class="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-md hover:shadow-lg">
                      Join
                    </a>`
                      : ""
                  }
                </div>`;
              container.prepend(card);

              // Clear form fields and reset icon selection
              document.getElementById("roomName").value = "";
              document.getElementById("roomType").value = "";
              document.getElementById("roomDescription").value = "";
              document.getElementById("roomAccess").value = "";
              document.getElementById("restrictedToHostel").value = "";
              selectedIcon = "";
              document
                .querySelectorAll(".icon-option")
                .forEach((i) =>
                  i.classList.remove("border-2", "border-blue-500")
                );
              Swal.fire(
                "Success",
                "Chat room created successfully!",
                "success"
              );
            })
            .catch((err) => {
              console.error(err);
              Swal.fire("Error", err.message, "error");
            });
        });

      // Delete Chat Room (delegated event listener for all chat rooms)
      document
        .getElementById("chatRoomsContainer")
        .addEventListener("click", function (e) {
          if (e.target && e.target.matches("button.delete-chatroom")) {
            const chatRoomId = e.target.getAttribute("data-id");
            if (!chatRoomId) {
              Swal.fire("Error", "Invalid chat room ID", "error");
              return;
            }

            Swal.fire({
              title: "Are you sure?",
              text: "This chat room will be permanently deleted for all users!",
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: "Yes, delete it!",
            }).then((result) => {
              if (result.isConfirmed) {
                fetch(`/services/chatRoom/delete/${chatRoomId}`, {
                  method: "DELETE",
                })
                  .then((res) => {
                    if (!res.ok) {
                      return res.json().then((err) => {
                        throw new Error(
                          err.error || "Failed to delete chat room"
                        );
                      });
                    }
                    return res.json();
                  })
                  .then((data) => {
                    // Remove the chat room card from the UI
                    const chatRoomCard = e.target.closest(
                      ".bg-white, .bg-gradient-to-br"
                    );
                    if (chatRoomCard) {
                      try {
                        chatRoomCard.style.transition = "all 0.3s ease";
                        chatRoomCard.style.opacity = "0";
                        chatRoomCard.style.transform = "scale(0.95)";
                        setTimeout(() => {
                          try {
                            chatRoomCard.remove();
                            // Check if there are no more chat rooms
                            const container =
                              document.getElementById("chatRoomsContainer");
                            if (container) {
                              const remainingRooms = container.querySelectorAll(
                                ".bg-white, .bg-gradient-to-br"
                              ).length;
                              if (remainingRooms === 0) {
                                container.innerHTML = `
                                    <div class="col-span-full text-center py-8">
                                        <p class="text-gray-500">No chat rooms available</p>
                                    </div>
                                `;
                              }
                            }
                          } catch (innerErr) {
                            console.error(
                              "Error cleaning up after delete:",
                              innerErr
                            );
                          }
                        }, 300);
                      } catch (styleErr) {
                        // Fallback if style manipulation fails
                        console.error(
                          "Error with style manipulation:",
                          styleErr
                        );
                        try {
                          chatRoomCard.remove();
                        } catch (removeErr) {
                          console.error("Error removing card:", removeErr);
                        }
                      }
                    } else {
                      // If we can't find the card, just reload the page after a small delay
                      setTimeout(() => window.location.reload(), 500);
                    }

                    Swal.fire(
                      "Deleted!",
                      data.message || "Chat room has been permanently deleted.",
                      "success"
                    );
                  })
                  .catch((err) => {
                    console.error(err);
                    Swal.fire("Error", err.message, "error");
                  });
              }
            });
          }
        });

      // Listen for chat room deletion events
      const socket = io();
      socket.on("chatRoomDeleted", ({ roomId, message }) => {
        // Find and remove the chat room card
        const deleteButton = document.querySelector(
          `button.delete-chatroom[data-id="${roomId}"]`
        );
        const chatRoomCard = deleteButton
          ? deleteButton.closest(".bg-white, .bg-gradient-to-br")
          : document.querySelector(`[data-room-id="${roomId}"]`);

        if (chatRoomCard) {
          try {
            chatRoomCard.style.transition = "all 0.3s ease";
            chatRoomCard.style.opacity = "0";
            chatRoomCard.style.transform = "scale(0.95)";

            setTimeout(() => {
              try {
                chatRoomCard.remove();
                // Check if there are no more chat rooms
                const container = document.getElementById("chatRoomsContainer");
                if (container) {
                  const remainingRooms = container.querySelectorAll(
                    ".bg-white, .bg-gradient-to-br"
                  ).length;
                  if (remainingRooms === 0) {
                    container.innerHTML = `
                      <div class="col-span-full text-center py-8">
                          <p class="text-gray-500">No chat rooms available</p>
                      </div>
                    `;
                  }
                }
              } catch (innerErr) {
                console.error(
                  "Error cleaning up after socket delete:",
                  innerErr
                );
              }
            }, 300);
          } catch (styleErr) {
            // Fallback if style manipulation fails
            console.error(
              "Error with style manipulation in socket handler:",
              styleErr
            );
            try {
              chatRoomCard.remove();
            } catch (removeErr) {
              console.error(
                "Error removing card in socket handler:",
                removeErr
              );
            }
          }

          // Show notification
          Swal.fire({
            title: "Chat Room Deleted",
            text: message,
            icon: "info",
            confirmButtonText: "OK",
          });
        }
      });
    </script>

    <%- include('partials/footer.ejs') %>
    <script src="/js/navbar.js"></script>
  </body>
</html>
