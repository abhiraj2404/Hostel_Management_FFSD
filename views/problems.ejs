<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Problem Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"></script>

    <style>
      .gradient {
        background: linear-gradient(90deg, #004aad 0%, #cb6ce6 100%);
      }
      body {
        font-family: "Source Sans Pro", sans-serif;
      }
    </style>
  </head>
  <body class="bg-gray-50">
    <!--header starts-->
    <%- include('partials/navbar.ejs') %>

    <!-- Hero Section -->
    <div class="pt-24">
      <div
        class="container px-3 mx-auto flex flex-wrap flex-col md:flex-row items-center"
      >
        <h1 class="text-6xl font-bold leading-tight text-center w-full">
          Hostel Services
        </h1>
      </div>
    </div>
    <!-- Buttons for Loading Components -->
    <div class="container mx-auto text-center py-8">
      <button
        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded m-2"
      >
        <a href="/services/problems">Problem</a>
      </button>
      <button
        class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded m-2"
      >
        <a href="/services/register">Entry/Exit</a>
      </button>
      <button
        class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded m-2"
      >
        <a href="/services/chat-room">Chat Room</a>
      </button>
    </div>
    <!--header ends-->
    <div class="container mx-auto p-4">
      <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">Problem Tracker</h1>

        <!-- Modal toggle -->
        <% if (role === 'student') { %>
        <button
          data-modal-target="crud-modal"
          data-modal-toggle="crud-modal"
          class="block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
          type="button"
        >
          Register New Problem
        </button>
        <% } %>
        <!-- Main modal -->
        <div
          id="crud-modal"
          tabindex="-1"
          aria-hidden="true"
          class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full"
        >
          <div class="relative p-4 w-full max-w-md max-h-full">
            <!-- Modal content -->
            <div
              class="relative bg-white rounded-lg shadow-sm dark:bg-gray-700"
            >
              <!-- Modal header -->
              <div
                class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600 border-gray-200"
              >
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                  Register New Problem
                </h3>
                <button
                  type="button"
                  class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
                  data-modal-toggle="crud-modal"
                >
                  <svg
                    class="w-3 h-3"
                    aria-hidden="true"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 14 14"
                  >
                    <path
                      stroke="currentColor"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
                    />
                  </svg>
                  <span class="sr-only">Close modal</span>
                </button>
              </div>
              <!-- Modal body -->

              <form id="problemForm" class="p-4 md:p-5">
                <div class="grid gap-4 mb-4 grid-cols-2">
                  <div class="col-span-2">
                    <label
                      for="problemTitle"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                      >Problem Title</label
                    >
                    <input
                      type="text"
                      name="problemTitle"
                      id="problemTitle"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      placeholder="Type problem title"
                      required=""
                    />
                    <!-- Input for Problem Title -->
                  </div>
                  <div class="col-span-2">
                    <label
                      for="problemDescription"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                      >Problem Description</label
                    >
                    <textarea
                      id="problemDescription"
                      rows="4"
                      class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                      placeholder="Write problem description here"
                      required=""
                    ></textarea>
                    <!-- Input for Problem Description -->
                  </div>
                  <div class="col-span-2">
                    <label
                      for="problemImage"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                      >Upload Image</label
                    >
                    <input
                      type="file"
                      name="problemImage"
                      id="problemImage"
                      accept="image/*"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      required
                    />
                    <!-- Input for Problem Image -->
                  </div>
                  <div class="col-span-2 sm:col-span-1">
                    <label
                      for="roomNo"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                      >Room Number</label
                    >
                    <input
                      type="text"
                      name="roomNo"
                      id="roomNo"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      placeholder="room number"
                      required=""
                    />
                    <!-- Input for Room Number -->
                  </div>
                  <div class="col-span-2 sm:col-span-1">
                    <label
                      for="category"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                      >Category</label
                    >
                    <select
                      id="category"
                      name="category"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      required
                    >
                      <option selected="">Select category</option>
                      <option value="Electrical">Electrical</option>
                      <option value="Plumbing">Plumbing</option>
                      <option value="Painting">Painting</option>
                      <option value="Carpentry">Carpentry</option>
                      <option value="Cleaning">Cleaning</option>
                      <option value="Internet">Internet</option>
                      <option value="Furniture">Furniture</option>
                      <option value="Pest Control">Pest Control</option>
                      <option value="Other">Other</option>
                    </select>
                    <!-- Input for Category -->
                  </div>
                  <div class="col-span-2 sm:col-span-1">
                    <label
                      for="roll_number"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                      >Roll Number</label
                    >
                    <input
                      type="text"
                      name="roll_number"
                      id="roll_number"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      placeholder="roll number"
                      required=""
                    />
                    <!-- Input for Roll Number -->
                  </div>
                  <div class="col-span-2 sm:col-span-1">
                    <label
                      for="hostel"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                      >Hostel</label
                    >
                    <select
                      id="hostel"
                      name="hostel"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
                      required
                    >
                      <option selected="">Select category</option>
                      <option value="BH-1">BH-1</option>
                      <option value="BH-2">BH-2</option>
                      <option value="BH-3">BH-3</option>
                      <option value="BH-4">BH-4</option>
                    </select>
                    <!-- Input for Hostel -->
                  </div>
                </div>
                <button
                  type="submit"
                  class="text-white inline-flex items-center bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                >
                  <svg
                    class="me-1 -ms-1 w-5 h-5"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z"
                      clip-rule="evenodd"
                    ></path>
                  </svg>
                  Add Problem
                </button>
              </form>
            </div>
          </div>
        </div>
        <!--here it ends-->
      </div>

      <!--here it starts-->
      <div
        id="problem-container"
        class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
      >
        <!-- Modal toggle -->
        <% problems.forEach(problem => { %>
        <div
          data-modal-target="problem-modal<%= problem.problemId %>"
          data-modal-toggle="problem-modal<%= problem.problemId %>"
          class="problem-card bg-white rounded-lg shadow-md overflow-hidden cursor-pointer hover:shadow-lg transition-shadow"
          data-id="<%= problem.problemId %>"
        >
          <div class="relative h-48 w-full">
            <img
              src="<%=problem.problemImage%>"
              alt="<%=problem.problemTitle%>"
              class="w-full h-full object-cover"
            />
          </div>
          <div class="p-4">
            <div class="flex flex-row items-center justify-between mb-2">
              <h3 class="text-lg font-semibold"><%= problem.problemTitle %></h3>
              <% if (problem.status === "Pending") { %>
              <span
                class="px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800"
              >
                Pending
              </span>
              <% } else if (problem.status === "Resolved") { %>
              <span
                class="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800"
              >
                Resolved
              </span>
              <% } else if (problem.status === "Rejected") { %>
              <span
                class="px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800"
              >
                Rejected
              </span>
              <% } %>
            </div>
            <div class="flex items-center text-sm text-gray-600">
              <span
                class="bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs"
              >
                <%= problem.category %>
              </span>
              <span class="ml-2"> Hostel: <%= problem.hostel %> </span>
            </div>
          </div>
        </div>

        <!--main modal-->
        <div
          id="problem-modal<%= problem.problemId %>"
          class="modal fixed inset-0 bg-black bg-opacity-50 items-center justify-center hidden z-50"
        >
          <div
            class="bg-white rounded-lg p-6 w-full max-w-3xl max-h-[90vh] overflow-y-auto"
          >
            <div class="flex justify-between items-center mb-4">
              <h2 id="detailsTitle" class="text-xl font-bold">
                <%= problem.problemTitle %>
              </h2>

              <button
                type="button"
                class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white"
                data-modal-toggle="problem-modal<%= problem.problemId %>"
              >
                <svg
                  class="w-3 h-3"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 14 14"
                >
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"
                  />
                </svg>
                <span class="sr-only">Close modal</span>
              </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="rounded-lg overflow-hidden">
                <img
                  id="detailsImage"
                  src="<%=problem.problemImage%>"
                  alt="<%=problem.problemTitle%>"
                  class="w-full h-auto object-cover"
                />
              </div>
              <div class="space-y-4">
                <div>
                  <div class="flex items-center mt-2">
                    <% if (problem.status === "Pending") { %>
                    <span
                      class="px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800"
                    >
                      Pending
                    </span>
                    <% } else if (problem.status === "Resolved") { %>
                    <span
                      class="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800"
                    >
                      Resolved
                    </span>
                    <% } else if (problem.status === "Rejected") { %>
                    <span
                      class="px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800"
                    >
                      Rejected
                    </span>
                    <% } %>
                    <span
                      id="detailsCategory"
                      class="ml-2 px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs font-medium"
                    >
                      <%= problem.category %>
                    </span>
                  </div>
                </div>
                <div>
                  <h4 class="text-sm font-medium text-gray-500">Description</h4>
                  <p id="detailsDescription" class="text-gray-700 mt-1">
                    <%= problem.problemDescription %>
                  </p>
                </div>
                <div class="border-t pt-4">
                  <h4 class="text-sm font-medium text-gray-500">Reported By</h4>
                  <p id="detailsReporter" class="text-gray-700 mt-1">
                    Roll Number: <%= problem.studentId %>
                  </p>
                  <div class="grid grid-cols-2 gap-4 mt-2">
                    <div>
                      <h4 class="text-sm font-medium text-gray-500">Hostel</h4>
                      <p id="detailsHostel" class="text-gray-700">
                        <%= problem.hostel %>
                      </p>
                    </div>
                    <div>
                      <h4 class="text-sm font-medium text-gray-500">Room</h4>
                      <p id="detailsRoom" class="text-gray-700">
                        <%= problem.roomNumber %>
                      </p>
                    </div>
                  </div>
                </div>
                <!--change status-->
                <% if (role !== 'student') { %>
                <div class="border-t pt-4">
                  <h4 class="text-sm font-medium text-gray-700 mb-2">
                    Change Status
                  </h4>
                  <form id="statusForm" class="flex items-center space-x-2">
                    <input
                      id="problemId"
                      type="hidden"
                      name="problemId"
                      value="<%= problem.problemId %>"
                    />
                    <select
                      name="status"
                      id="status"
                      class="border border-gray-300 rounded-md p-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option selected value="Select Status">
                        Select Status
                      </option>
                      <option value="Pending">Pending</option>
                      <option value="Resolved">Resolved</option>
                      <% if (role === 'admin') { %>
                      <option value="Rejected">Rejected</option>
                      <% } %>
                    </select>
                    <button
                      type="submit"
                      class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-1 px-3 rounded-md transition duration-200"
                    >
                      Change Status
                    </button>
                  </form>
                </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>
        <% }) %>
      </div>

      <!--here it ends-->
    </div>
    <%- include('partials/footer.ejs') %>
    <script src="/js/navbar.js"></script>
    <script>
      // document
      //   .getElementById("problemForm")
      //   .addEventListener("submit", async function (event) {
      //     event.preventDefault();

      //     // Get form values
      //     const form = event.target;
      //     const problemTitle = form.problemTitle.value.trim();
      //     const problemDescription = form.problemDescription.value.trim();
      //     const problemImage = form.problemImage.files[0];
      //     const roomNo = form.roomNo.value.trim();
      //     const category = form.category.value;
      //     const studentId = form.roll_number.value.trim();
      //     const hostel = form.hostel.value;

      //     console.log("Form Data:", {
      //       problemTitle,
      //       problemDescription,
      //       problemImage,
      //       roomNo,
      //       category,
      //       studentId,
      //       hostel,
      //     });

      //     // Check if all fields are filled
      //     if (
      //       !problemTitle ||
      //       !problemDescription ||
      //       !problemImage ||
      //       !roomNo ||
      //       !category ||
      //       !studentId ||
      //       !hostel
      //     ) {
      //       return alert("All fields are required.");
      //     }

      //     try {
      //       // Upload image to Cloudinary
      //       const formData = new FormData();
      //       formData.append("file", problemImage);
      //       formData.append("upload_preset", "hostelia");

      //       const cloudinaryRes = await fetch(
      //         "https://api.cloudinary.com/v1_1/dyzoysf4v/image/upload",
      //         { method: "POST", body: formData }
      //       );
      //       const cloudinaryData = await cloudinaryRes.json();

      //       console.log("Cloudinary Response:", cloudinaryData);

      //       if (!cloudinaryData.secure_url)
      //         return alert("Image upload failed.");

      //       // Send problem data to backend
      //       const response = await fetch("/services/problems/add", {
      //         method: "POST",
      //         headers: { "Content-Type": "application/json" },
      //         body: JSON.stringify({
      //           problemTitle,
      //           problemDescription,
      //           problemImage: cloudinaryData.secure_url,
      //           roomNo: Number(roomNo),
      //           category,
      //           studentId,
      //           hostel,
      //         }),
      //       });

      //       console.log("Server Response:", response);

      //       if (!response.ok) {
      //         const errorData = await response.json();
      //         console.error("Error adding problem:", errorData);
      //         return alert("Error adding problem: " + errorData.message);
      //       }

      //       alert("Problem added successfully!");
      //       form.reset();
      //     } catch (error) {
      //       console.error("Error:", error);
      //       alert("An error occurred.");
      //     }
      //   });
      document
        .getElementById("problemForm")
        .addEventListener("submit", async function (event) {
          event.preventDefault();

          const formData = new FormData();
          formData.append(
            "problemTitle",
            document.getElementById("problemTitle").value.trim()
          );
          formData.append(
            "problemDescription",
            document.getElementById("problemDescription").value.trim()
          );
          formData.append(
            "problemImage",
            document.getElementById("problemImage").files[0]
          ); // Image file
          formData.append(
            "roomNo",
            document.getElementById("roomNo").value.trim()
          );
          formData.append(
            "category",
            document.getElementById("category").value
          );
          formData.append(
            "studentId",
            Number(document.getElementById("roll_number").value.trim())
          );
          formData.append("hostel", document.getElementById("hostel").value);

          try {
            const response = await fetch("/services/problems/add", {
              method: "POST",
              body: formData, // No need to set Content-Type, fetch handles it automatically
            });

            const data = await response.json();
            console.log("Response from server:", data);

            if (response.ok) {
              alert("Problem added successfully!");
              this.reset();
              location.reload();
            } else {
              console.error("Error adding problem:", data);
              alert("Error adding problem.");
            }
          } catch (error) {
            console.error("Error in problem form submission:", error);
            alert("An error occurred while adding the problem.");
          }
        });
    </script>
    <script>
      document
        .getElementById("statusForm")
        .addEventListener("submit", async function (event) {
          event.preventDefault(); // Prevent default form submission

          const status = document.getElementById("status").value;
          const problemId = document.getElementById("problemId").value; // Ensure this exists in your form

          if (!problemId) {
            alert("Problem ID is missing.");
            return;
          }

          try {
            const response = await fetch("/services/problems/statusChange", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ status, problemId }),
            });

            if (response.ok) {
              alert("Status updated successfully!");
              location.reload(); // Reload to reflect changes
            } else {
              const error = await response.json();
              alert("Error updating status: " + error.message);
            }
          } catch (error) {
            console.error("Error:", error);
            alert("An error occurred while updating the status.");
          }
        });
    </script>
  </body>
</html>
