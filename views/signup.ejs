<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Sign Up Page</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(-10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      @keyframes waveBorder {
        0% {
          box-shadow: inset 0 0 10px rgba(107, 114, 128, 0.2);
        }
        50% {
          box-shadow: inset 0 0 20px rgba(107, 114, 128, 0.4);
        }
        100% {
          box-shadow: inset 0 0 10px rgba(107, 114, 128, 0.2);
        }
      }
      .animate-fade-in {
        animation: fadeIn 0.8s ease-in-out;
      }
      .animate-wave {
        animation: waveBorder 2s infinite alternate;
      }

      /* Modal styles */
      .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 50;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease-in-out;
      }

      .modal-overlay.active {
        opacity: 1;
        visibility: visible;
      }

      .modal-content {
        background-color: white;
        padding: 2rem;
        border-radius: 0.5rem;
        max-width: 500px;
        width: 100%;
        transform: translateY(-20px);
        transition: transform 0.3s ease-in-out;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      }

      .modal-overlay.active .modal-content {
        transform: translateY(0);
      }

      /* OTP input style */
      .otp-container {
        display: flex;
        justify-content: space-between;
        margin: 1rem 0;
      }

      .otp-input {
        width: 3rem;
        height: 3rem;
        font-size: 1.5rem;
        text-align: center;
        border-radius: 0.5rem;
        border: 2px solid #e5e7eb;
        background-color: #f9fafb;
        transition: all 0.3s;
      }

      .otp-input:focus {
        outline: none;
        border-color: #6366f1;
        box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.2);
      }
    </style>
  </head>
  <body>
    <div class="min-h-screen bg-gray-100 text-gray-900 flex justify-center">
      <div
        class="max-w-screen-xl m-0 sm:m-10 bg-white shadow sm:rounded-lg flex justify-center flex-1"
      >
        <div class="lg:w-1/2 xl:w-5/12 p-6 sm:p-12">
          <div class="mt-12 flex flex-col items-center">
            <div
              class="flex flex-col items-center justify-center mb-6 text-center"
            >
              <svg
                width="48"
                height="48"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
                fill-rule="evenodd"
                clip-rule="evenodd"
                class="fill-current text-black"
              >
                <path
                  d="M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z"
                ></path>
              </svg>
              <p class="mt-4 font-bold text-2xl leading-6 text-gray-700">
                HOSTELIA - IIIT SRI CITY
              </p>
              <br />
            </div>
            <h1 class="text-2xl xl:text-3xl font-bold">Sign up</h1>
            <div class="w-full flex-1 mt-8">
              <div class="my-12 border-b text-center">
                <div
                  class="leading-none px-2 inline-block text-sm text-gray-600 tracking-wide font-medium bg-white transform translate-y-1/2"
                >
                  Enter your details to sign up
                </div>
                <p id="message" class="mt-4 text-sm font-medium"></p>
              </div>

              <div class="mx-auto max-w-xs">
                <form id="signupForm">
                  <input
                    class="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white"
                    type="text"
                    id="name"
                    name="name"
                    placeholder="Full Name"
                    required
                  />
                  <input
                    class="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                    type="text"
                    id="rollNo"
                    name="rollNo"
                    placeholder="Roll Number (3 digits)"
                    pattern="[0-9]{3}"
                    title="Please enter a valid 3-digit roll number"
                    required
                  />
                  <input
                    class="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                    type="email"
                    id="email"
                    name="email"
                    placeholder="Email (@iiits.in)"
                    pattern="[a-zA-Z0-9._%+-]+@iiits\.in$"
                    title="Please enter a valid @iiits.in email address"
                    required
                  />

                  <select
                    class="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                    id="year"
                    name="year"
                    required
                  >
                    <option value="" disabled selected>Select Year</option>
                    <option value="UG-1">UG-1</option>
                    <option value="UG-2">UG-2</option>
                    <option value="UG-3">UG-3</option>
                    <option value="UG-4">UG-4</option>
                  </select>
                  <select
                    class="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                    id="hostel"
                    name="hostel"
                    required
                  >
                    <option value="" disabled selected>Select Hostel</option>
                    <option value="BH-1">BH-1</option>
                    <option value="BH-2">BH-2</option>
                    <option value="BH-3">BH-3</option>
                    <option value="BH-4">BH-4</option>
                  </select>
                  <input
                    class="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                    type="text"
                    id="roomNo"
                    name="roomNo"
                    placeholder="Room Number"
                    pattern=".*[0-9].*"
                    title="Room number must contain at least one digit"
                    required
                  />
                  <input
                    class="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                    type="password"
                    name="password"
                    id="password"
                    placeholder="Password (minimum 6 characters)"
                    minlength="6"
                    required
                  />
                  <input
                    class="w-full px-8 py-4 rounded-lg font-medium bg-gray-100 border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
                    type="password"
                    name="confirmPassword"
                    id="confirmPassword"
                    placeholder="Confirm Password"
                    required
                  />
                  <button
                    type="submit"
                    id="signupBtn"
                    class="mt-5 tracking-wide font-semibold bg-indigo-500 text-gray-100 w-full py-4 rounded-lg hover:bg-indigo-700 transition-all duration-300 ease-in-out flex items-center justify-center focus:shadow-outline focus:outline-none"
                  >
                    <svg
                      class="w-6 h-6 -ml-2"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2" />
                      <circle cx="8.5" cy="7" r="4" />
                      <path d="M20 8v6M23 11h-6" />
                    </svg>
                    <span class="ml-3">Sign Up</span>
                  </button>
                </form>
                <p class="mt-6 text-xs text-gray-600 text-center">
                  Already have an account?

                  <a
                    href="/login"
                    class="border-b border-gray-500 border-dotted"
                  >
                    Log In
                  </a>
                </p>
              </div>
            </div>
          </div>
        </div>
        <div class="flex-1 bg-indigo-100 text-center hidden lg:flex">
          <div
            class="m-12 xl:m-16 w-full bg-contain bg-center bg-no-repeat"
            style="background-image: url('/images/Building safety-amico.svg')"
          ></div>
        </div>
      </div>
    </div>

    <!-- OTP Verification Modal -->
    <div id="otpModal" class="modal-overlay">
      <div class="modal-content animate-fade-in">
        <div class="text-center">
          <h3 class="text-xl font-bold text-gray-800 mb-4">
            Email Verification
          </h3>
          <p class="text-gray-600 mb-6">
            We've sent a 6-digit OTP to your email address. Please enter it
            below to verify your account.
          </p>

          <div id="otpStatusMessage" class="mb-4 text-sm font-medium"></div>

          <div class="otp-container">
            <input type="text" maxlength="1" class="otp-input" data-index="1" />
            <input type="text" maxlength="1" class="otp-input" data-index="2" />
            <input type="text" maxlength="1" class="otp-input" data-index="3" />
            <input type="text" maxlength="1" class="otp-input" data-index="4" />
            <input type="text" maxlength="1" class="otp-input" data-index="5" />
            <input type="text" maxlength="1" class="otp-input" data-index="6" />
          </div>

          <p class="text-gray-500 text-sm mb-4">
            Didn't receive the code?
            <button
              id="resendOtp"
              class="text-indigo-600 font-medium hover:underline"
            >
              Resend OTP
            </button>
          </p>

          <div class="flex justify-between items-center mt-6">
            <button
              id="cancelOtpBtn"
              class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-100 transition-colors"
            >
              Cancel
            </button>
            <button
              id="verifyOtpBtn"
              class="px-6 py-2 bg-indigo-600 rounded-md text-white hover:bg-indigo-700 transition-colors"
            >
              Verify & Create Account
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const messageElement = document.getElementById("message");
        const signupForm = document.getElementById("signupForm");
        const signupBtn = document.getElementById("signupBtn");
        const emailInput = document.getElementById("email");
        const rollNoInput = document.getElementById("rollNo");
        const passwordInput = document.getElementById("password");
        const confirmPasswordInput = document.getElementById("confirmPassword");

        // Modal elements
        const otpModal = document.getElementById("otpModal");
        const otpInputs = document.querySelectorAll(".otp-input");
        const verifyOtpBtn = document.getElementById("verifyOtpBtn");
        const cancelOtpBtn = document.getElementById("cancelOtpBtn");
        const resendOtpBtn = document.getElementById("resendOtp");
        const otpStatusMessage = document.getElementById("otpStatusMessage");

        // Form data storage for OTP verification step
        let formData = {};

        // Handle OTP inputs
        otpInputs.forEach((input, index) => {
          input.addEventListener("keyup", (e) => {
            // Move to next input if current input is filled
            if (e.target.value.length === 1) {
              if (index < otpInputs.length - 1) {
                otpInputs[index + 1].focus();
              }
            }

            // Handle backspace
            if (e.key === "Backspace" && index > 0 && e.target.value === "") {
              otpInputs[index - 1].focus();
            }
          });

          // Only allow digits
          input.addEventListener("input", (e) => {
            e.target.value = e.target.value.replace(/[^0-9]/g, "");
          });
        });

        // Open OTP modal and send OTP
        async function openOtpModalAndSendOtp(data) {
          try {
            // Show modal
            otpModal.classList.add("active");

            // Reset OTP inputs
            otpInputs.forEach((input) => (input.value = ""));
            otpInputs[0].focus();

            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-blue-600";
            otpStatusMessage.textContent = "Sending OTP to your email...";

            // Send request to generate OTP
            const response = await fetch("/auth/generate-otp", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ email: data.email }),
            });

            const result = await response.json();

            if (!response.ok) {
              throw new Error(result.message || "Failed to send OTP");
            }

            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-green-600";
            otpStatusMessage.textContent =
              "OTP sent successfully! Please check your email.";
          } catch (error) {
            console.error("Error:", error);
            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-red-600";
            otpStatusMessage.textContent =
              error.message || "Error sending OTP. Please try again.";

            setTimeout(() => {
              // Close modal on error
              otpModal.classList.remove("active");
            }, 3000);
          }
        }

        // Close OTP modal
        function closeOtpModal() {
          otpModal.classList.remove("active");
        }

        // Collect OTP from inputs
        function getOtpValue() {
          return Array.from(otpInputs)
            .map((input) => input.value)
            .join("");
        }

        // Submit form handler - Validate and then show OTP modal
        signupForm.addEventListener("submit", function (e) {
          e.preventDefault();

          // Reset message
          messageElement.className = "mt-4 text-sm font-medium";
          messageElement.textContent = "";

          // Validate roll number format
          if (!/^[0-9]{3}$/.test(rollNoInput.value)) {
            messageElement.className = "mt-4 text-sm font-medium text-red-600";
            messageElement.textContent =
              "Roll number must be exactly 3 digits!";
            rollNoInput.focus();
            return;
          }

          // Validate room number format
          const roomNo = document.getElementById("roomNo").value;
          if (!/.*[0-9].*/.test(roomNo)) {
            messageElement.className = "mt-4 text-sm font-medium text-red-600";
            messageElement.textContent =
              "Room number must contain at least one digit!";
            document.getElementById("roomNo").focus();
            return;
          }

          // Validate email format
          if (!emailInput.value.endsWith("@iiits.in")) {
            messageElement.className = "mt-4 text-sm font-medium text-red-600";
            messageElement.textContent = "Email must end with @iiits.in!";
            emailInput.focus();
            return;
          }

          // Validate password match
          if (passwordInput.value !== confirmPasswordInput.value) {
            messageElement.className = "mt-4 text-sm font-medium text-red-600";
            messageElement.textContent = "Passwords do not match!";
            confirmPasswordInput.focus();
            return;
          }

          // Store form data for OTP verification step
          formData = {
            name: document.getElementById("name").value,
            rollNo: rollNoInput.value,
            email: emailInput.value,
            hostel: document.getElementById("hostel").value,
            roomNo: document.getElementById("roomNo").value,
            year: document.getElementById("year").value,
            password: passwordInput.value,
          };

          // Open OTP modal and send OTP
          openOtpModalAndSendOtp(formData);
        });

        // Cancel OTP verification
        cancelOtpBtn.addEventListener("click", closeOtpModal);

        // Resend OTP
        resendOtpBtn.addEventListener("click", async () => {
          try {
            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-blue-600";
            otpStatusMessage.textContent = "Resending OTP...";

            // Send request to generate new OTP
            const response = await fetch("/auth/generate-otp", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ email: formData.email }),
            });

            const result = await response.json();

            if (!response.ok) {
              throw new Error(result.message || "Failed to resend OTP");
            }

            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-green-600";
            otpStatusMessage.textContent =
              "OTP resent successfully! Please check your email.";

            // Reset OTP inputs
            otpInputs.forEach((input) => (input.value = ""));
            otpInputs[0].focus();
          } catch (error) {
            console.error("Error:", error);
            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-red-600";
            otpStatusMessage.textContent =
              error.message || "Error resending OTP. Please try again.";
          }
        });

        // Verify OTP and complete signup
        verifyOtpBtn.addEventListener("click", async () => {
          try {
            const otp = getOtpValue();

            if (otp.length !== 6) {
              otpStatusMessage.className =
                "mb-4 text-sm font-medium text-red-600";
              otpStatusMessage.textContent =
                "Please enter all 6 digits of the OTP";
              return;
            }

            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-blue-600";
            otpStatusMessage.textContent =
              "Verifying OTP and creating your account...";

            verifyOtpBtn.disabled = true;
            verifyOtpBtn.textContent = "Processing...";

            // Send request to verify OTP and create account
            const response = await fetch("/auth/verify-otp", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                email: formData.email,
                otp,
                userData: formData,
              }),
            });

            const result = await response.json();

            if (!response.ok) {
              throw new Error(result.message || "OTP verification failed");
            }

            // Account created successfully
            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-green-600";
            otpStatusMessage.textContent =
              "Account created successfully! Redirecting...";

            // Redirect to home page after 1.5 seconds
            setTimeout(() => {
              window.location.href = "/";
            }, 1500);
          } catch (error) {
            console.error("Error:", error);
            otpStatusMessage.className =
              "mb-4 text-sm font-medium text-red-600";
            otpStatusMessage.textContent =
              error.message || "OTP verification failed. Please try again.";

            verifyOtpBtn.disabled = false;
            verifyOtpBtn.textContent = "Verify & Create Account";
          }
        });
      });
    </script>
  </body>
</html>
